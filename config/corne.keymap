/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Larrow {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <38 19>;
            layers = <0>;
            timeout-ms = <200>;
        };

        Rarrow {
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <38 21>;
            layers = <0>;
            timeout-ms = <200>;
        };

        Darrow {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <38 20>;
            layers = <0>;
            timeout-ms = <200>;
        };

        Uarrow {
            bindings = <&kp UP_ARROW>;
            key-positions = <38 8>;
            layers = <0>;
            timeout-ms = <200>;
        };
    };

    behaviors {
        layer_jump: layer_jump {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_JUMP";
            bindings = <&to>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "balanced";
        };

        tapnhold: tapnhold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPNHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESC    &tapnhold DQT Q  &tapnhold SQT W  &kp E     &kp R     &kp T        &kp Y      &kp U                     &kp I                 &kp O                      &kp P                 &kp BSPC
&kp TAB    &kp A            &kp S            &kp D     &kp F     &kp G        &kp H      &kp J                     &kp K                 &kp L                      &tapnhold SEMI COLON  &kp RET
&kp LSHFT  &kp Z            &kp X            &kp C     &kp V     &kp B        &kp N      &kp M                     &tapnhold EXCL COMMA  &tapnhold QUESTION PERIOD  &tapnhold BSLH FSLH   &kp RSHFT
                                             &kp LALT  &kp LGUI  &kp SPACE    &kp SPACE  &kp INT_KATAKANAHIRAGANA  &layer_jump 2 1
            >;
        };

        nums {
            bindings = <
&kp ESC     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp N7   &kp N8  &kp N9       &kp DOLLAR   &kp LESS_THAN    &kp GREATER_THAN  &kp AMPERSAND  &kp PIPE        &kp BACKSPACE
&kp TAB     &kp LBKT              &kp RBKT               &kp N4   &kp N5  &kp N6       &kp INT_YEN  &kp PLUS         &kp ASTRK         &kp EQUAL      &kp PERCENT     &kp ENTER
&kp LSHIFT  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp N1   &kp N2  &kp N3       &kp HASH     &kp MINUS        &kp KP_DIVIDE     &kp COMMA      &kp UNDERSCORE  &trans
                                                         &kp DOT  &kp N0  &kp SPACE    &kp SPACE    &layer_jump 0 0  &layer_jump 3 2
            >;
        };

        game {
            bindings = <
&kp ESC  &kp N1  &kp N2  &kp N3  &kp N4            &kp N5       &kp N6     &kp N7           &kp N8           &kp N9     &kp N0     &trans
&trans   &kp F1  &kp F2  &kp F3  &kp F4            &kp F5       &trans     &kp Q            &kp UP           &kp E      &kp F      &kp ENTER
&trans   &kp F6  &kp F7  &kp Q   &kp E             &kp F        &trans     &kp LEFT         &kp DOWN         &kp RIGHT  &kp ENTER  &kp ENTER
                         &trans  &kp LEFT_COMMAND  &kp SPACE    &kp SPACE  &layer_jump 0 1  &layer_jump 3 3
            >;
        };

        hide {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans           &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans           &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans           &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &layer_jump 0 2  &trans
            >;
        };
    };
};
